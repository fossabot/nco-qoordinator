// Code generated by mockery v2.43.0. DO NOT EDIT.

package querycoordinator

import (
	context "context"

	models "github.com/ncotds/nco-qoordinator/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// Exec provides a mock function with given fields: ctx, query, user
func (_m *MockClient) Exec(ctx context.Context, query models.Query, user models.Credentials) models.QueryResult {
	ret := _m.Called(ctx, query, user)

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 models.QueryResult
	if rf, ok := ret.Get(0).(func(context.Context, models.Query, models.Credentials) models.QueryResult); ok {
		r0 = rf(ctx, query, user)
	} else {
		r0 = ret.Get(0).(models.QueryResult)
	}

	return r0
}

// MockClient_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type MockClient_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - ctx context.Context
//   - query models.Query
//   - user models.Credentials
func (_e *MockClient_Expecter) Exec(ctx interface{}, query interface{}, user interface{}) *MockClient_Exec_Call {
	return &MockClient_Exec_Call{Call: _e.mock.On("Exec", ctx, query, user)}
}

func (_c *MockClient_Exec_Call) Run(run func(ctx context.Context, query models.Query, user models.Credentials)) *MockClient_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Query), args[2].(models.Credentials))
	})
	return _c
}

func (_c *MockClient_Exec_Call) Return(_a0 models.QueryResult) *MockClient_Exec_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_Exec_Call) RunAndReturn(run func(context.Context, models.Query, models.Credentials) models.QueryResult) *MockClient_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockClient) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockClient_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockClient_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockClient_Expecter) Name() *MockClient_Name_Call {
	return &MockClient_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockClient_Name_Call) Run(run func()) *MockClient_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_Name_Call) Return(_a0 string) *MockClient_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_Name_Call) RunAndReturn(run func() string) *MockClient_Name_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
